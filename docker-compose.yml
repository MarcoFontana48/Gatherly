version: '3.8'

services:
  user-sql-db:
    image: mysql:latest
    container_name: user-sql-repository
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: user
      MYSQL_USER: user
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      DB_HOST: user-sql-repository
      DB_PORT: 3307
    ports:
      - "3307:3306"
    volumes:
      - user-sql-data:/var/lib/mysql
      - ./user-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 40s
      timeout: 5s
      retries: 5
    secrets:
      - db_root_password
      - db_password
    networks:
      - app-network

  user-service:
    image: marcofontana17/asw-social-network-user-service:latest
    container_name: user-service
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: user
      MYSQL_USER: user
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      DB_HOST: user-sql-repository
      DB_PORT: 3306
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
    ports:
      - "8080:8080"
    depends_on:
      user-sql-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    secrets:
      - db_root_password
      - db_password
    networks:
      - app-network

  friendship-sql-repository:
    image: mysql:latest
    container_name: friendship-sql-repository
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: friendship
      MYSQL_USER: user
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      DB_HOST: friendship-sql-repository
      DB_PORT: 3308
    ports:
      - "3308:3306"
    volumes:
      - friendship-sql-data:/var/lib/mysql
      - ./friendship-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 40s
      timeout: 5s
      retries: 5
    secrets:
      - db_root_password
      - db_password
    networks:
      - app-network

  friendship-service:
    image: marcofontana17/asw-social-network-friendship-service:latest
    container_name: friendship-service
    ports:
      - "8081:8080"
    depends_on:
      friendship-sql-repository:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      MYSQL_DATABASE: friendship
      MYSQL_USER: user
      DB_HOST: friendship-sql-repository
      DB_PORT: 3306
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    secrets:
      - db_root_password
      - db_password
    networks:
      - app-network

#  content-sql-repository:
#    image: mysql:latest
#    container_name: content-sql-repository
#    environment:
#      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
#      MYSQL_DATABASE: content
#      MYSQL_USER: user
#      MYSQL_PASSWORD_FILE: /run/secrets/db_password
#      DB_HOST: content-sql-repository
#      DB_PORT: 3306
#    ports:
#      - "3309:3306"
#    volumes:
#      - content-sql-data:/var/lib/mysql
#      - ./content-service/init.sql:/docker-entrypoint-initdb.d/init.sql
#    healthcheck:
#      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
#      interval: 20s
#      timeout: 5s
#      retries: 5
#    secrets:
#      - db_root_password
#      - db_password
#    networks:
#      - app-network

  content-mongo-repository:
    image: mongo:latest
    container_name: content-mongo-repository
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MONGO_INITDB_DATABASE: content
    ports:
      - "27017:27017"
    volumes:
      - content-mongo-data:/data/db
      - ./content-service/init.js:/docker-entrypoint-initdb.d/init.js
    secrets:
      - db_root_password
      - db_password
    networks:
      - app-network

  content-service:
    image: marcofontana17/asw-social-network-content-service:latest
    container_name: content-service
    ports:
      - "8082:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      MYSQL_DATABASE: content
      MYSQL_USER: user
      DB_HOST: content-sql-repository
      DB_PORT: 3306
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 3
    secrets:
      - db_root_password
      - db_password
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
      user-sql-db:
        condition: service_healthy
      friendship-sql-repository:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 30s
      timeout: 10s
      retries: 5

secrets:
  db_root_password:
    file: ./db-root-password.txt
  db_password:
    file: ./db-password.txt

volumes:
  user-sql-data:
    driver: local
  friendship-sql-data:
    driver: local
  content-sql-data:
    driver: local
  kafka-data:
    driver: local
  content-mongo-data:
    driver: local

networks:
  app-network:
    driver: bridge
