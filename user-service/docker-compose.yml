version: '3.8'

services:
  user-sql-db:
    image: mysql:latest
    container_name: user-sql-repository
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: user
      MYSQL_USER: user
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      DB_HOST: user-sql-repository
      DB_PORT: 3307
    ports:
      - "3307:3306"
    volumes:
      - user-sql-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 40s
      timeout: 5s
      retries: 5
    secrets:
      - db_root_password
      - db_password
    networks:
      - app-network

  user-service:
    image: social-network-user-service:latest
    container_name: user-service
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: user
      MYSQL_USER: user
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      DB_HOST: user-sql-repository
      DB_PORT: 3306
    ports:
      - "8080:8080"
    depends_on:
      user-sql-db:
        condition: service_healthy
    secrets:
      - db_root_password
      - db_password
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
      user-sql-db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

secrets:
  db_root_password:
    file: ./db-root-password.txt
  db_password:
    file: ./db-password.txt

volumes:
  user-sql-data:
    driver: local

networks:
  app-network:
    driver: bridge
